/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  FlowCommon,
  FlowCommonInterface,
  DeployerDiscoverableMetaV1ConstructionConfigStruct,
} from "../../../contracts/flow/FlowCommon";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "metaHash_",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "deployer",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "meta",
            type: "bytes",
          },
        ],
        internalType: "struct DeployerDiscoverableMetaV1ConstructionConfig",
        name: "config_",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "unmeta",
        type: "bytes",
      },
    ],
    name: "NotRainMetaV1",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expectedHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "actualHash",
        type: "bytes32",
      },
    ],
    name: "UnexpectedMetaHash",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[][]",
        name: "context",
        type: "uint256[][]",
      },
    ],
    name: "Context",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "contract IInterpreterV1",
            name: "interpreter",
            type: "address",
          },
          {
            internalType: "contract IInterpreterStoreV1",
            name: "store",
            type: "address",
          },
          {
            internalType: "address",
            name: "expression",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct Evaluable",
        name: "evaluable",
        type: "tuple",
      },
    ],
    name: "FlowInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "subject",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "meta",
        type: "bytes",
      },
    ],
    name: "MetaV1",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type FlowCommonConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FlowCommonConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FlowCommon__factory extends ContractFactory {
  constructor(...args: FlowCommonConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    metaHash_: PromiseOrValue<BytesLike>,
    config_: DeployerDiscoverableMetaV1ConstructionConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FlowCommon> {
    return super.deploy(
      metaHash_,
      config_,
      overrides || {}
    ) as Promise<FlowCommon>;
  }
  override getDeployTransaction(
    metaHash_: PromiseOrValue<BytesLike>,
    config_: DeployerDiscoverableMetaV1ConstructionConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(metaHash_, config_, overrides || {});
  }
  override attach(address: string): FlowCommon {
    return super.attach(address) as FlowCommon;
  }
  override connect(signer: Signer): FlowCommon__factory {
    return super.connect(signer) as FlowCommon__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlowCommonInterface {
    return new utils.Interface(_abi) as FlowCommonInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FlowCommon {
    return new Contract(address, _abi, signerOrProvider) as FlowCommon;
  }
}
